name: ML Pipeline CI/CD

on:
  push: # Déclenche le workflow à chaque push

jobs:
  test:
    runs-on: ubuntu-latest # Exécute sur une machine Ubuntu
    steps:
      - name: Checkout code
        uses: actions/checkout@v2 # Télécharge le code
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8' # Version de Python
      - name: Install dependencies
        run: pip install -r requirements.txt # Installe les dépendances
      - name: Run unit tests
        run: pytest tests/ # Exécute les tests unitaires

  prepare-data:
    runs-on: ubuntu-latest
    needs: test # Attend que les tests soient terminés
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Prepare data
        run: python scripts/data_preparation.py # Exécute le script de préparation des données

  train-model:
    runs-on: ubuntu-latest
    needs: prepare-data # Attend que la préparation des données soit terminée
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Train model
        run: python main.py # Exécute l'entraînement du modèle

  notify:
    runs-on: ubuntu-latest
    needs: train-model # Attend que l'entraînement soit terminé
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Configure ton webhook Slack
          SLACK_MESSAGE: "ML Pipeline terminé avec succès !"
